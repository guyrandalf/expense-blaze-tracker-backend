{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/guyrandalf/Software/blaze-expense-tracker-backend/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = global as unknown as {\n    prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n    globalForPrisma.prisma ??\n    new PrismaClient({\n        log: ['query'],\n    })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACT,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACb,KAAK;QAAC;KAAQ;AAClB;AAEJ,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 118, "column": 0}, "map": {"version":3,"sources":["file:///Users/guyrandalf/Software/blaze-expense-tracker-backend/src/lib/auth.ts"],"sourcesContent":["import jwt from \"jsonwebtoken\"\nimport { NextResponse } from \"next/server\"\n\nconst JWT_SECRET = process.env.JWT_SECRET!\n\nif (!JWT_SECRET) {\n  throw new Error(\"JWT_SECRET environment variable is not set\")\n}\n\nexport interface JWTPayload {\n  userId: string\n  email: string\n  iat?: number\n  exp?: number\n}\n\nexport function signJWT(payload: Omit<JWTPayload, \"iat\" | \"exp\">): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: \"7d\" })\n}\n\nexport function verifyJWT(token: string): JWTPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as JWTPayload\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (error) {\n    return null\n  }\n}\n\nexport function getAuthToken(request: Request): string | null {\n  const authHeader = request.headers.get(\"Authorization\")\n  if (!authHeader?.startsWith(\"Bearer \")) {\n    return null\n  }\n  return authHeader.split(\" \")[1]\n}\n\nexport function withAuth(\n  handler: (req: Request, userId: string) => Promise<Response>\n) {\n  return async (req: Request) => {\n    const token = getAuthToken(req)\n    if (!token) {\n      return NextResponse.json({ error: \"No token provided\" }, { status: 401 })\n    }\n\n    const payload = verifyJWT(token)\n    if (!payload) {\n      return NextResponse.json({ error: \"Invalid token\" }, { status: 401 })\n    }\n\n    return handler(req, payload.userId)\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAEzC,IAAI,CAAC,YAAY;IACf,MAAM,IAAI,MAAM;AAClB;AASO,SAAS,QAAQ,OAAwC;IAC9D,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,SAAS,UAAU,KAAa;IACrC,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,6DAA6D;IAC7D,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,aAAa,OAAgB;IAC3C,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;IACvC,IAAI,CAAC,YAAY,WAAW,YAAY;QACtC,OAAO;IACT;IACA,OAAO,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;AACjC;AAEO,SAAS,SACd,OAA4D;IAE5D,OAAO,OAAO;QACZ,MAAM,QAAQ,aAAa;QAC3B,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,MAAM,UAAU,UAAU;QAC1B,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,OAAO,QAAQ,KAAK,QAAQ,MAAM;IACpC;AACF","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///Users/guyrandalf/Software/blaze-expense-tracker-backend/src/app/api/auth/sign-in/route.ts"],"sourcesContent":["import {prisma} from \"../../../../lib/prisma\"\nimport { NextRequest, NextResponse } from \"next/server\"\nimport bcrypt from \"bcryptjs\"\nimport { signJWT } from \"../../../../lib/auth\"\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { email, password } = await req.json()\n\n    // Basic validation\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: \"Email and password are required\" },\n        { status: 400 }\n      )\n    } \n\n    // Find user\n    const user = await prisma.user.findUnique({\n      where: { email },\n    })\n\n    if (!user || !user.password) {\n      return NextResponse.json(\n        { error: \"Invalid credentials\" },\n        { status: 401 }\n      )\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, user.password)\n\n    if (!isValidPassword) {\n      return NextResponse.json(\n        { error: \"Invalid credentials\" },\n        { status: 401 }\n      )\n    }\n\n    // Generate JWT token\n    const token = signJWT({\n      userId: user.id,\n      email: user.email,\n    })\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: _, ...userWithoutPassword } = user\n\n    return NextResponse.json({\n      user: userWithoutPassword,\n      token,\n    })\n  } catch (error) {\n    console.error(\"Error in sign-in:\", error)\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE1C,mBAAmB;QACnB,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,YAAY;QACZ,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACxC,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;YAC3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,kBAAkB;QAClB,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAEpE,IAAI,CAAC,iBAAiB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsB,GAC/B;gBAAE,QAAQ;YAAI;QAElB;QAEA,qBAAqB;QACrB,MAAM,QAAQ,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD,EAAE;YACpB,QAAQ,KAAK,EAAE;YACf,OAAO,KAAK,KAAK;QACnB;QAEA,gCAAgC;QAChC,6DAA6D;QAC7D,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM;YACN;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
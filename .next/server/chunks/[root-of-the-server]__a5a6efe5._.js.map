{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/guyrandalf/Software/blaze-expense-tracker-backend/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst globalForPrisma = global as unknown as {\n    prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n    globalForPrisma.prisma ??\n    new PrismaClient({\n        log: ['query'],\n    })\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACT,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACb,KAAK;QAAC;KAAQ;AAClB;AAEJ,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///Users/guyrandalf/Software/blaze-expense-tracker-backend/src/app/api/auth/sign-up/route.ts"],"sourcesContent":["import { prisma } from \"@/lib/prisma\"\nimport { NextRequest, NextResponse } from \"next/server\"\nimport bcrypt from \"bcryptjs\"\n\nexport async function POST(req: NextRequest) {\n  try {\n    const { email, password, firstName, lastName } = await req.json()\n\n    // Basic validation\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: \"Email and password are required\" },\n        { status: 400 }\n      )\n    }\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    })\n\n    if (existingUser) {\n      return NextResponse.json(\n        { error: \"User with this email already exists\" },\n        { status: 409 }\n      )\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10)\n\n    // Create new user\n    const newUser = await prisma.user.create({\n      data: {\n        email,\n        password: hashedPassword,\n        firstName,\n        lastName,\n      },\n    })\n\n    // Remove password from response\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { password: _, ...userWithoutPassword } = newUser\n\n    return NextResponse.json(userWithoutPassword, { status: 201 })\n  } catch (error) {\n    console.error(\"Error in sign-up:\", error)\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAE/D,mBAAmB;QACnB,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAChD,OAAO;gBAAE;YAAM;QACjB;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAsC,GAC/C;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,kBAAkB;QAClB,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACvC,MAAM;gBACJ;gBACA,UAAU;gBACV;gBACA;YACF;QACF;QAEA,gCAAgC;QAChC,6DAA6D;QAC7D,MAAM,EAAE,UAAU,CAAC,EAAE,GAAG,qBAAqB,GAAG;QAEhD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,qBAAqB;YAAE,QAAQ;QAAI;IAC9D,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}
{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///Users/guyrandalf/Software/blaze-expense-tracker-backend/src/lib/auth.ts"],"sourcesContent":["import jwt from \"jsonwebtoken\"\nimport { NextResponse } from \"next/server\"\n\nconst JWT_SECRET = process.env.JWT_SECRET!\n\nif (!JWT_SECRET) {\n  throw new Error(\"JWT_SECRET environment variable is not set\")\n}\n\nexport interface JWTPayload {\n  userId: string\n  email: string\n  iat?: number\n  exp?: number\n}\n\nexport function signJWT(payload: Omit<JWTPayload, \"iat\" | \"exp\">): string {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: \"7d\" })\n}\n\nexport function verifyJWT(token: string): JWTPayload | null {\n  try {\n    return jwt.verify(token, JWT_SECRET) as JWTPayload\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  } catch (error) {\n    return null\n  }\n}\n\nexport function getAuthToken(request: Request): string | null {\n  const authHeader = request.headers.get(\"Authorization\")\n  if (!authHeader?.startsWith(\"Bearer \")) {\n    return null\n  }\n  return authHeader.split(\" \")[1]\n}\n\nexport function withAuth(\n  handler: (req: Request, userId: string) => Promise<Response>\n) {\n  return async (req: Request) => {\n    const token = getAuthToken(req)\n    if (!token) {\n      return NextResponse.json({ error: \"No token provided\" }, { status: 401 })\n    }\n\n    const payload = verifyJWT(token)\n    if (!payload) {\n      return NextResponse.json({ error: \"Invalid token\" }, { status: 401 })\n    }\n\n    return handler(req, payload.userId)\n  }\n}\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,UAAU;AAEzC,IAAI,CAAC,YAAY;IACf,MAAM,IAAI,MAAM;AAClB;AASO,SAAS,QAAQ,OAAwC;IAC9D,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,YAAY;QAAE,WAAW;IAAK;AACzD;AAEO,SAAS,UAAU,KAAa;IACrC,IAAI;QACF,OAAO,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;IAC3B,6DAA6D;IAC7D,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,SAAS,aAAa,OAAgB;IAC3C,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;IACvC,IAAI,CAAC,YAAY,WAAW,YAAY;QACtC,OAAO;IACT;IACA,OAAO,WAAW,KAAK,CAAC,IAAI,CAAC,EAAE;AACjC;AAEO,SAAS,SACd,OAA4D;IAE5D,OAAO,OAAO;QACZ,MAAM,QAAQ,aAAa;QAC3B,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,MAAM,UAAU,UAAU;QAC1B,IAAI,CAAC,SAAS;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,OAAO,QAAQ,KAAK,QAAQ,MAAM;IACpC;AACF","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///Users/guyrandalf/Software/blaze-expense-tracker-backend/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\n\nconst globalForPrisma = global as unknown as {\n  prisma: PrismaClient | undefined\n}\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  })\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 179, "column": 0}, "map": {"version":3,"sources":["file:///Users/guyrandalf/Software/blaze-expense-tracker-backend/src/app/api/budget/analysis/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport { withAuth } from \"@/lib/auth\";\nimport { prisma } from \"@/lib/prisma\";\n\nexport const GET = withAuth(async (req: Request, userId: string) => {\n  try {\n    const url = new URL(req.url);\n    const month = Number(url.searchParams.get(\"month\"));\n    const year = Number(url.searchParams.get(\"year\"));\n    if (!month || !year) {\n      return NextResponse.json(\n        { error: \"Month and year are required\" },\n        { status: 400 }\n      );\n    }\n    // Get budget\n    const budget = await prisma.budget.findUnique({\n      where: {\n        userId_month_year: {\n          userId,\n          month,\n          year,\n        },\n      },\n    });\n    // Get total expenses for the month\n    const expenses = await prisma.expense.findMany({\n      where: {\n        userId,\n        expenseDate: {\n          gte: new Date(year, month - 1, 1),\n          lt: new Date(year, month, 1),\n        },\n      },\n    });\n    const totalExpenses = expenses.reduce((sum, e) => sum + e.amount, 0);\n    return NextResponse.json({\n      budget,\n      totalExpenses,\n      difference: budget ? budget.amount - totalExpenses : null,\n    });\n  } catch (error) {\n    console.error(\"Error fetching budget analysis:\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch budget analysis\" },\n      { status: 500 }\n    );\n  }\n}); "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,MAAM,CAAA,GAAA,oHAAA,CAAA,WAAQ,AAAD,EAAE,OAAO,KAAc;IAC/C,IAAI;QACF,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;QAC3B,MAAM,QAAQ,OAAO,IAAI,YAAY,CAAC,GAAG,CAAC;QAC1C,MAAM,OAAO,OAAO,IAAI,YAAY,CAAC,GAAG,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,MAAM;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAElB;QACA,aAAa;QACb,MAAM,SAAS,MAAM,sHAAA,CAAA,SAAM,CAAC,MAAM,CAAC,UAAU,CAAC;YAC5C,OAAO;gBACL,mBAAmB;oBACjB;oBACA;oBACA;gBACF;YACF;QACF;QACA,mCAAmC;QACnC,MAAM,WAAW,MAAM,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,OAAO;gBACL;gBACA,aAAa;oBACX,KAAK,IAAI,KAAK,MAAM,QAAQ,GAAG;oBAC/B,IAAI,IAAI,KAAK,MAAM,OAAO;gBAC5B;YACF;QACF;QACA,MAAM,gBAAgB,SAAS,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,MAAM,EAAE;QAClE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA,YAAY,SAAS,OAAO,MAAM,GAAG,gBAAgB;QACvD;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAkC,GAC3C;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}